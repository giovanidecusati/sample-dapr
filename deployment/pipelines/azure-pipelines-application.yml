# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

pool:
  vmImage: ubuntu-latest

variables:
  - name: buildConfiguration
    value: 'Release'
  - name: basketApiImageName
    value: 'nwd-basket-api'
  - name: tag
    value: '$(Build.BuildId)'
  - group: DAPR-LAB
  - group: DAPR-LAB-AKV

steps:

- task: UseDotNet@2
  inputs:
    version: '6.x'
    
- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'

- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    arguments: '--configuration $(buildConfiguration)'
  displayName: 'dotnet build $(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: build
    projects: '**/*.csproj'
    arguments: '--configuration $(buildConfiguration)' # Update this to match your need

- task: DotNetCoreCLI@2
  inputs:
    command: test
    projects: '**/*Tests/*.csproj'
    arguments: '--configuration $(buildConfiguration)'

- task: DotNetCoreCLI@2
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory)'
    zipAfterPublish: True

# this code takes all the files in $(Build.ArtifactStagingDirectory) and uploads them as an artifact of your build.
- task: PublishPipelineArtifact@1
  inputs:
    targetPath: '$(Build.ArtifactStagingDirectory)' 
    artifactName: 'drop'

- script: |
    docker login -u $(acrUserName) -p $(acrPassword) $(acrLoginServer)
  displayName: 'Login to ACR'

- task: Docker@2
  displayName: Build an image
  inputs:
    repository: $(basketApiImageName)
    command: buildAndPush
    dockerfile: src/Basket/Nwd.Basket.Api/Dockerfile
    tags: |
      $(tag)
      latest